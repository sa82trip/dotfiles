#+TITLE: Emacs 設定
#+AUTHOR: Ordinary Devv
#+PROPERTY: header-args:emacs-lisp :tangle yes

* パッケージ管理
** Use-package
*** 役割
`use-package` は Emacs パッケージを宣言的に管理するために使用されます。パッケージのインストール、読み込み、設定を簡潔に定義するのに役立ちます。必要なパッケージを自動的にインストールし、Emacs の起動時間を最適化するのに貢献します。

*** 設定方法
`use-package` を使用する前に、Emacs パッケージアーカイブを設定する必要があります。ここでは、MELPA、GNU ELPA、および MELPA Stable アーカイブが追加されます。`package-initialize` はパッケージシステムを初期化し、`use-package` は存在しない場合に自動的にインストールされます。`use-package-always-ensure t` は `use-package` ブロックで指定されたすべてのパッケージが自動的にインストールされるようにします。

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(package-initialize)

(defvar my-package-install-retry-count 0)
(defadvice package-install (around my-package-install-advice (package-name) activate)
  "パッケージのインストールに失敗した場合、ユーザーの確認後にコンテンツを更新して再試行します。"
  (condition-case err
      ad-do-it
    (error
     (when (and (string-match "unavailable" (cadr err))
                (< my-package-install-retry-count 3))
       (setq my-package-install-retry-count (1+ my-package-install-retry-count))
       (if (y-or-n-p (format "パッケージ %s のインストールに失敗しました。パッケージのコンテンツを更新して再試行しますか？ " package-name))
           (progn
             (message "パッケージのコンテンツを更新して再試行しています...")
             (package-refresh-contents)
             (package-install package-name)) ; 同じパッケージでインストールを再試行
         (message "ユーザーによってパッケージのインストールが中止されました。"))))))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* 環境設定
** exec-path-from-shell
*** 役割
Emacs がシェルと同じ環境変数、特に `PATH` を共有するようにします。これは、macOS 上の Emacs 内から `brew` などのコマンドラインツールを見つけて実行するために重要です。

*** 設定方法
このパッケージは、起動時にシェル環境から `PATH` を Emacs にコピーします。

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

* 基本設定
*** 役割
基本的な Emacs の動作を設定します。主に、使いやすさを向上させるための視覚的要素とファイル保存方法に関する設定が含まれます。

*** 設定方法
- `global-display-line-numbers-mode 1`: すべてのバッファに行番号を表示します。コードの記述やデバッグに役立ちます。
- コメントアウトされたセクションは、自動保存とテーマの読み込みに関連しています。必要に応じてコメントを解除して使用できます。

#+begin_src emacs-lisp
;;(load-theme 'modus-vivendi t)
(global-display-line-numbers-mode 1)

;;(global-auto-revert-mode 1)
;;(setq auto-save-default t)
;;(setq auto-save-interval 300)

(setq scroll-conservatively 100000) ; カーソルが画面の中央に自動的にスクロールするのを防ぎます
#+end_src

* テーマ
** Doom Themes
*** 役割
`doom-themes` は Emacs 用のさまざまな美しいテーマを提供します。視覚的な快適さとコードの可読性を向上させます。

*** 設定方法
`use-package` を使用して `doom-themes` をインストールして読み込みます。`:ensure t` は、パッケージが存在しない場合に自動的にインストールされるようにします。`:config` ブロックで `load-theme` 関数を使用して、目的のテーマを読み込みます。ここでは `doom-one` テーマが使用されます。

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+end_src

* ナビゲーションと補完
** Ivy
*** 役割
`Ivy` は Emacs のミニバッファ用の柔軟で高速な補完フレームワークです。ファイル、バッファ、コマンドなど、さまざまなアイテムを効率的に検索して選択するのに役立ちます。

*** 設定方法
`use-package` を使用して `Ivy` をインストールしてアクティブにします。`:ensure t` は、パッケージが存在しない場合に自動的にインストールされるようにします。

#+begin_src emacs-lisp
(use-package ivy
  :ensure t)
#+end_src

** Counsel
*** 役割
`Counsel` は `Ivy` フレームワークに基づいて、さまざまなコマンドと関数にインターフェイスを提供します。`M-x` (execute-extended-command) などの Emacs のコア機能を `Ivy` の強力な検索およびフィルタリング機能と統合することで、使いやすさを向上させます。

*** 設定方法
`use-package` を使用して `Counsel` をインストールし、`:config` ブロックで `M-x` キーを `counsel-M-x` にバインドして、Ivy ベースのコマンド実行を有効にします。

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x))
#+end_src

** Projectile
*** 役割
`Projectile` は Emacs の強力なプロジェクト管理ツールです。プロジェクト内のファイルの検索、バッファの切り替え、コンパイル、テストの実行など、プロジェクト関連のタスクを効率的に実行するのに役立ちます。

*** 設定方法
`use-package` を使用して `Projectile` をインストールしてアクティブにします。ほとんどのプロジェクトで追加の設定なしでうまく機能します。

#+begin_src emacs-lisp
(use-package projectile
  :ensure t)
#+end_src

** Company
*** 役割
`Company` は Emacs のテキスト自動補完フレームワークです。コードを記述する際にコンテキストに応じた補完候補を提供し、生産性を向上させます。

*** 設定方法
`use-package` を使用して `Company` をインストールし、`:init` ブロックで `global-company-mode` をアクティブにして、すべてのバッファで自動補完を有効にします。

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (global-company-mode))
#+end_src

* Evil モードの設定
** Evil
*** 役割
`Evil` は、Emacs で Vim のキーバインドと編集スタイルを使用できるようにする強力なエミュレーションレイヤーです。Vim ユーザーが使い慣れた Vim 操作で Emacs の豊富な機能を活用できるようにします。

*** 設定方法
`use-package` を使用して `Evil` をインストールしてアクティブにします。
- `:init` ブロックでは、`evil-want-integration t` が他の Emacs パッケージとの統合を有効にし、`evil-want-keybinding nil` が `Evil` がデフォルトの Emacs キーバインドを上書きしないようにします。
- `:config` ブロックでは、`(evil-mode 1)` が `Evil` モードをグローバルにアクティブにします。
- `(define-key evil-insert-state-map "jk" 'evil-normal-state)` は、`jk` を押して挿入モードからノーマルモードに切り替えるためのカスタムキーバインドです。

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

** Evil Collection
*** 役割
`Evil Collection` は `Evil` モードをさまざまな組み込みの Emacs 機能や人気のあるパッケージと統合し、一貫した Vim キーバインド体験を提供します。たとえば、Dired、Magit、Org モードなどで Vim キーバインドを使用できるようになります。

*** 設定方法
`use-package` を使用して `Evil Collection` をインストールし、`:after evil` を使用して `Evil` パッケージの読み込み後にアクティブにします。`:config` ブロックで `(evil-collection-init)` を呼び出して統合を初期化します。

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil Surround
*** 役割
`Evil Surround` は Vim の `surround.vim` プラグインに似たパッケージで、括弧、引用符、タグなどを簡単に追加、変更、削除できます。コードの編集時に非常に便利です。

*** 設定方法
`use-package` を使用して `Evil Surround` をインストールし、`:after evil` を使用して `Evil` パッケージの読み込み後にアクティブにします。`:config` ブロックで `(global-evil-surround-mode 1)` を呼び出して `Evil Surround` 機能をグローバルにアクティブにします。

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

* 編集
** smartparens
*** 役割
`smartparens`は、ペア単位の編集を支援するパッケージです。括弧、ブラケット、引用符などのペアを自動的に挿入し、それらをインテリジェントに操作するコマンドを提供します。コードや構造化されたテキストを記述する際に非常に便利です。

*** 設定方法
`use-package` を使用して `smartparens` をインストールします。`:config` ブロックで `(smartparens-global-mode 1)` を呼び出し、グローバルで機能を有効にします。

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1))
#+end_src

* vterm
** 役割
`vterm` は、Emacs 内でフル機能のターミナルエミュレータを提供するパッケージです。Emacs を離れることなく、シェルコマンドの実行、コマンドラインツールの使用、ターミナルセッションの管理ができます。

** 設定方法
`use-package` を使用して `vterm` をインストールします。この設定は `vterm` の動的モジュールをコンパイルするために必要な `cmake` がシステムにインストールされているかを確認します。
- *macOS* では `cmake` が見つからない場合、Homebrew を使用して自動的にインストールされます。
- *Linux* では `cmake` が見つからない場合、パッケージマネージャ（例：`sudo apt-get install cmake`）を使用してインストールするようにメッセージが表示されます。
`cmake` のインストール後、`vterm` が正しくコンパイルされるためには Emacs の再起動が必要になる場合があります。

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :init
  (setq vterm-always-compile-module t)
  :config
  (when (not (executable-find "cmake"))
    (cond ((eq system-type 'darwin)
           (message "vterm: cmake not found. Attempting to install via Homebrew...")
           (shell-command "brew install cmake")
           (message "CMake has been installed. Please restart Emacs to allow vterm to compile."))
          ((eq system-type 'gnu/linux)
           (message "vterm: cmake not found. Please install it via 'sudo apt-get install cmake' and restart Emacs."))
          (t
           (message "vterm: cmake not found. Please install it using your system's package manager and restart Emacs.")))))
#+end_src

(use-package vterm
  :ensure t
  :init
  (setq vterm-always-compile-module t))
#+end_src

* Git 統合
** transient
*** 役割
`transient` は、Magit を含む多くの Emacs パッケージで使用されるライブラリで、一時的なキーマップと引数を持つ複雑でインタラクティブなコマンドを作成します。複数ステップの操作に一貫したインターフェイスを提供します。

*** 設定方法
Magit などの `transient` に依存するパッケージの前に `transient` がインストールされて読み込まれるようにします。

#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src

** Magit
*** 役割
`Magit` は Emacs 用の包括的な Git インターフェイスです。Emacs 内で直接 Git リポジトリと対話するための便利で強力な方法を提供し、ステージングやコミットからブランチングやリベースまで、あらゆる Git 操作を直感的な Emacs インターフェイスを介して提供します。

*** 設定方法
`use-package` を使用して `Magit` をインストールします。`:ensure t` キーワードは、`Magit` がまだ存在しない場合に自動的にインストールされるようにします。`:bind` オプションは `C-x g` キーバインドを設定して、ほとんどの `Magit` 操作の主要なエントリポイントである `Magit` ステータスバッファをすばやく開きます。

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :after transient
  :init
  (require 'transient)
  :bind ("C-x g" . magit-status))
#+end_src

* 一般的なキーバインド
** which-key
*** 役割
`which-key` は、プレフィックスキー（リーダーキー `SPC` など）を押した後に利用可能なキーバインドをポップアップウィンドウに表示する不可欠なパッケージです。これにより、キーバインドの発見と使用がはるかに簡単になります。

*** 設定方法
`use-package` を使用して `which-key` をインストールしてアクティブにします。`:config` ブロックで `(which-key-mode)` を呼び出してグローバルに有効にします。

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** General
*** 役割
`General` は、Emacs でカスタムキーバインドを設定するために使用される強力なパッケージです。「リーダーキー」を使用して Vim のようなキーバインドシステムを構築する場合に、複雑なキーシーケンスを簡単に定義および管理するのに役立ちます。

*** 設定方法
`use-package` を使用して `General` をインストールします。

`:config` ブロックで `general-create-definer` を使用して、`leader-def` という名前の新しいキーバインド定義を作成します。
- `:prefix "SPC"`: スペースバーをリーダーキーとして設定します。つまり、すべてのカスタムキーバインドはスペースバーを押した後に開始されます。
- `:non-normal-prefix "M-SPC"`: 非ノーマル状態（挿入モードなど）のリーダーキーとして `M-SPC`（Alt + スペース）を設定します。
- `:states '(normal insert emacs)`: `normal`、`insert`、`emacs` モードでこのキーバインド定義を有効にします。

`leader-def` を使用して実際のキーバインドを定義します。
- `(leader-def ":" 'counsel-M-x)`: `SPC :` を押すと `counsel-M-x`（Ivy ベースのコマンド実行）が実行されます。
- `(leader-def "b N" 'switch-to-buffer)`: `SPC b N` を押すとバッファ切り替えコマンドが実行されます。

`which-key-idle-delay` と `which-key-show-remaining-keys` は `which-key` パッケージ（`General` と一緒に使用されることが多い）の動作を設定します。`which-key` は、リーダーキーを押した後に利用可能な次のキーバインドのポップアップを表示する便利なパッケージです。

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-create-definer leader-def
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    :states '(normal insert emacs))

  (leader-def
    ":" 'counsel-M-x
    "<" 'ivy-switch-buffer ; spc < でバッファリストを開きます。
    "b" '(:ignore t :which-key "Buffers")
    "b N" 'switch-to-buffer
    "b k" 'kill-buffer
    "t" '(:ignore t :which-key "Terminal")
    "t t" 'vterm
    "f" '(:ignore t :which-key "Files")
    "f p" '("Find config.org" . (lambda () (interactive) (find-file (expand-file-name "~/dotfiles/config.org"))))))
(setq which-key-idle-delay 0.5)
(setq which-key-show-remaining-keys t)
#+end_src

* キーバインド
** 役割
このセクションでは、特に Evil モードユーザー向けに編集エクスペリエンスを向上させるためのカスタムキーバインドを定義します。目標は、特定のキーを Vim のような動作に合わせて再マッピングし、不可欠な Emacs コマンドへのアクセスを維持することです。

** 設定方法
次の設定が適用されます。
- `C-u` は、直感的なスクロールのために Evil のノーマルおよびビジュアル状態で `evil-scroll-up` に再マッピングされます。
- 元の `universal-argument` コマンドは、簡単にアクセスできるように `SPC u` に移動されます。

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

(leader-def
  "u" 'universal-argument)
#+end_src

* カスタム設定
** 役割
このセクションには、Emacs の `customize` インターフェイスによって生成されたカスタム設定が含まれています。これらの設定は通常、`M-x customize` または関連する関数を使用すると Emacs によって自動的に保存されます。手動エラーを回避するために、`customize` インターフェイスを介してこれらの設定を管理することをお勧めします。

** 設定方法
`custom-set-variables` ブロックはカスタム変数の値を定義し、`custom-set-faces` はカスタムフェイス（フォントと色）の設定を定義します。これらは Emacs によって自動的に生成および管理されます。

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables は Custom によって追加されました。
 ;; 手で編集すると壊れる可能性があるので、注意してください。
 ;; init ファイルには、このようなインスタンスが 1 つだけ含まれている必要があります。
 ;; 複数ある場合、正しく機能しません。
 '(package-selected-packages
   '(vterm which-key projectile general evil-surround evil-collection doom-themes counsel company cider)))
(custom-set-faces
 ;; custom-set-faces は Custom によって追加されました。
 ;; 手で編集すると壊れる可能性があるので、注意してください。
 ;; init ファイルには、このようなインスタンスが 1 つだけ含まれている必要があります。
 ;; 複数ある場合、正しく機能しません。
 )
#+end_src