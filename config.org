#+TITLE: Emacs Configuration
#+AUTHOR: Ordinary Devv 
#+PROPERTY: header-args:emacs-lisp :tangle yes

* Package Management
** Use-package
*** Role
`use-package` is used for declaratively managing Emacs packages. It helps define package installation, loading, and configuration concisely. It automatically installs necessary packages and contributes to optimizing Emacs startup time.

*** Configuration Method
Before using `use-package`, you need to set up Emacs package archives. Here, MELPA, GNU ELPA, and MELPA Stable archives are added. `package-initialize` initializes the package system, and `use-package` is automatically installed if not present. `use-package-always-ensure t` ensures that all packages specified in `use-package` blocks are automatically installed.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(package-initialize)

(defvar my-package-install-retry-count 0)
(defadvice package-install (around my-package-install-advice (package-name) activate)
  "Retry package installation after refreshing contents if it fails, with user confirmation."
  (condition-case err
      ad-do-it
    (error
     (when (and (string-match "unavailable" (cadr err))
                (< my-package-install-retry-count 3))
       (setq my-package-install-retry-count (1+ my-package-install-retry-count))
       (if (y-or-n-p (format "Package installation failed for %s. Refresh package contents and retry? " package-name))
           (progn
             (message "Refreshing package contents and retrying...")
             (package-refresh-contents)
             (package-install package-name)) ; Retry installation with the same package
         (message "Package installation aborted by user."))))))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Environment Setup
** exec-path-from-shell
*** Role
Ensures that Emacs shares the same environment variables as your shell, particularly the `PATH`. This is crucial for finding and executing command-line tools like `brew` from within Emacs on macOS.

*** Configuration Method
This package copies the `PATH` from your shell environment into Emacs upon startup.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

* Basic Settings
*** Role
Configures basic Emacs behavior. Primarily includes settings for visual elements and file saving methods to improve usability.

*** Configuration Method
- `global-display-line-numbers-mode 1`: Displays line numbers in all buffers. Useful for writing code or debugging.
- Commented-out sections are related to auto-saving and theme loading. You can uncomment them as needed.

#+begin_src emacs-lisp
;;(load-theme 'modus-vivendi t)
(global-display-line-numbers-mode 1)

;;(global-auto-revert-mode 1)
;;(setq auto-save-default t)
;;(setq auto-save-interval 300)

(setq scroll-conservatively 100000) ; Prevent cursor from auto-scrolling to center of screen
#+end_src

* Themes
** Doom Themes
*** Role
`doom-themes` provides a variety of beautiful themes for Emacs. It enhances visual comfort and code readability.

*** Configuration Method
Install and load `doom-themes` using `use-package`. `:ensure t` ensures the package is automatically installed if not present. In the `:config` block, use the `load-theme` function to load your desired theme. Here, the `doom-one` theme is used.

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+end_src

* Navigation and Completion
** Ivy
*** Role
`Ivy` is a flexible and fast completion framework for Emacs's minibuffer. It helps efficiently search and select various items such as files, buffers, and commands.

*** Configuration Method
Install and activate `Ivy` using `use-package`. `:ensure t` ensures the package is automatically installed if not present.

#+begin_src emacs-lisp
(use-package ivy
  :ensure t)
#+end_src

** Counsel
*** Role
`Counsel` provides an interface for various commands and functions based on the `Ivy` framework. It enhances usability by integrating core Emacs functions like `M-x` (execute-extended-command) with `Ivy`'s powerful search and filtering capabilities.

*** Configuration Method
Install `Counsel` using `use-package`, and in the `:config` block, bind the `M-x` key to `counsel-M-x` to enable Ivy-based command execution.

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x))
#+end_src

** Projectile
*** Role
`Projectile` is a powerful tool for project management in Emacs. It helps efficiently perform project-related tasks such as searching files within a project, switching buffers, compiling, and running tests.

*** Configuration Method
Install and activate `Projectile` using `use-package`. It works well in most projects without additional configuration.

#+begin_src emacs-lisp
(use-package projectile
  :ensure t)
#+end_src

** Company
*** Role
`Company` is Emacs's text auto-completion framework. It provides context-aware completion candidates when writing code, increasing productivity.

*** Configuration Method
Install `Company` using `use-package`, and in the `:init` block, activate `global-company-mode` to enable auto-completion in all buffers.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (global-company-mode))
#+end_src

* Evil Mode Configuration
** Evil
*** Role
`Evil` is a powerful emulation layer that allows you to use Vim's keybindings and editing style in Emacs. It enables Vim users to leverage Emacs's rich features with familiar Vim operations.

*** Configuration Method
Install and activate `Evil` using `use-package`.
- In the `:init` block, `evil-want-integration t` enables integration with other Emacs packages, and `evil-want-keybinding nil` prevents `Evil` from overwriting default Emacs keybindings.
- In the `:config` block, `(evil-mode 1)` globally activates `Evil` mode.
- `(define-key evil-insert-state-map "jk" 'evil-normal-state)` is a custom keybinding to switch to normal mode from insert mode by pressing `jk`.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

** Evil Collection
*** Role
`Evil Collection` integrates `Evil` mode with various built-in Emacs features and popular packages, providing a consistent Vim keybinding experience. For example, it allows using Vim keybindings in Dired, Magit, Org-mode, and more.

*** Configuration Method
Install `Evil Collection` using `use-package`, and activate it after the `Evil` package loads using `:after evil`. In the `:config` block, call `(evil-collection-init)` to initialize the integration.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil Surround
*** Role
`Evil Surround` is a package similar to Vim's `surround.vim` plugin, allowing easy addition, modification, and deletion of parentheses, quotes, tags, and more. It is very useful when editing code.

*** Configuration Method
Install `Evil Surround` using `use-package`, and activate it after the `Evil` package loads using `:after evil`. In the `:config` block, call `(global-evil-surround-mode 1)` to globally activate `Evil Surround` functionality.

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

* vterm
** Role
`vterm` is a package that provides a fully-featured terminal emulator inside Emacs. It allows you to run shell commands, use command-line tools, and manage terminal sessions without leaving Emacs.

** Configuration Method
Install `vterm` using `use-package`. The configuration checks if `cmake` is available, which is required to compile `vterm`'s dynamic module.
- On *macOS*, if `cmake` is not found, it will be automatically installed using Homebrew.
- On *Linux*, if `cmake` is not found, a message will be displayed instructing the user to install it using their package manager (e.g., `sudo apt-get install cmake`).
A restart of Emacs may be required after `cmake` is installed for `vterm` to compile correctly.

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :init
  (setq vterm-always-compile-module t)
  :config
  (when (not (executable-find "cmake"))
    (cond ((eq system-type 'darwin)
           (message "vterm: cmake not found. Attempting to install via Homebrew...")
           (shell-command "brew install cmake")
           (message "CMake has been installed. Please restart Emacs to allow vterm to compile."))
          ((eq system-type 'gnu/linux)
           (message "vterm: cmake not found. Please install it via 'sudo apt-get install cmake' and restart Emacs."))
          (t
           (message "vterm: cmake not found. Please install it using your system's package manager and restart Emacs.")))))
#+end_src

* Git Integration
** transient
*** Role
`transient` is a library used by many Emacs packages, including Magit, to create complex, interactive commands with temporary keymaps and arguments. It provides a consistent interface for multi-step operations.

*** Configuration Method
Ensure `transient` is installed and loaded before packages that depend on it, such as Magit.

#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src

** Magit
*** Role
`Magit` is a comprehensive Git interface for Emacs. It provides a convenient and powerful way to interact with Git repositories directly within Emacs, offering a full range of Git operations from staging and committing to branching and rebasing, all through an intuitive Emacs interface.

*** Configuration Method
Install `Magit` using `use-package`. The `:ensure t` keyword ensures that `Magit` is automatically installed if it's not already present. The `:bind` option sets up a keybinding, `C-x g`, to quickly open the `Magit` status buffer, which is the primary entry point for most `Magit` operations.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :after transient
  :init
  (require 'transient)
  :bind ("C-x g" . magit-status))
#+end_src

* General Keybindings
** which-key
*** Role
`which-key` is an essential package that displays available keybindings in a popup window after you press a prefix key (like your leader key `SPC`). This makes discovering and using keybindings much easier.

*** Configuration Method
Install and activate `which-key` using `use-package`. `(which-key-mode)` is called in the `:config` block to enable it globally.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** General
*** Role
`General` is a powerful package used for setting custom keybindings in Emacs. It helps easily define and manage complex key sequences, especially for building a Vim-like keybinding system using a 'leader key'.

*** Configuration Method
Install `General` using `use-package`.

In the `:config` block, use `general-create-definer` to create a new keybinding definer called `leader-def`.
- `:prefix "SPC"`: Sets the spacebar as the leader key. This means all custom keybindings will start after pressing the spacebar.
- `:non-normal-prefix "M-SPC"`: Sets `M-SPC` (Alt + Space) as the leader key for non-normal states (e.g., insert mode).
- `:states '(normal insert emacs)`: Enables this keybinding definer for `normal`, `insert`, and `emacs` modes.

Define actual keybindings using `leader-def`.
- `(leader-def ":" 'counsel-M-x)`: Pressing `SPC :` executes `counsel-M-x` (Ivy-based command execution).
- `(leader-def "b N" 'switch-to-buffer)`: Pressing `SPC b N` executes the buffer switching command.

`which-key-idle-delay` and `which-key-show-remaining-keys` configure the behavior of the `which-key` package (often used with `General`). `which-key` is a useful package that shows a popup of available next keybindings after pressing a leader key.

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-create-definer leader-def
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    :states '(normal insert emacs))

  (leader-def
    ":" 'counsel-M-x
    "<" 'ivy-switch-buffer
    "b" '(:ignore t :which-key "Buffers")
    "b N" 'switch-to-buffer
    "b k" 'kill-buffer
    "t" '(:ignore t :which-key "Terminal")
    "t t" 'vterm
    "f" '(:ignore t :which-key "Files")
    "f p" '("Find config.org" . (lambda () (interactive) (find-file (expand-file-name "~/dotfiles/config.org"))))))
(setq which-key-idle-delay 0.5)
(setq which-key-show-remaining-keys t)
#+end_src

* Keybindings
** Role
This section defines custom keybindings to enhance the editing experience, particularly for Evil mode users. The goal is to remap certain keys to align with Vim-like behavior while preserving access to essential Emacs commands.

** Configuration Method
The following configurations are applied:
- `C-u` is remapped to `evil-scroll-up` in Evil's normal and visual states for intuitive scrolling.
- The original `universal-argument` command is moved to `SPC u` for easy access.

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

(leader-def
  "u" 'universal-argument)
#+end_src

* Custom Settings
** Role
This section contains custom settings generated by Emacs's `customize` interface. These settings are typically saved automatically by Emacs when you use `M-x customize` or related functions. It's generally recommended to manage these settings through the `customize` interface to avoid manual errors.

** Configuration Method
The `custom-set-variables` block defines custom variable values, and `custom-set-faces` defines custom face (font and color) settings. These are automatically generated and managed by Emacs.

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they't work right.
 '(package-selected-packages
   '(vterm which-key projectile general evil-surround evil-collection doom-themes counsel company cider)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they't work right.
 )
#+end_src
