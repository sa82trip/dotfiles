#+TITLE: Emacs 설정
#+AUTHOR: Ordinary Devv
#+PROPERTY: header-args:emacs-lisp :tangle yes

* 패키지 관리
** Use-package
*** 역할
`use-package`는 Emacs 패키지를 선언적으로 관리하는 데 사용됩니다. 패키지 설치, 로딩 및 설정을 간결하게 정의하는 데 도움이 됩니다. 필요한 패키지를 자동으로 설치하고 Emacs 시작 시간을 최적화하는 데 기여합니다.

*** 설정 방법
`use-package`를 사용하기 전에 Emacs 패키지 아카이브를 설정해야 합니다. 여기서는 MELPA, GNU ELPA 및 MELPA Stable 아카이브가 추가됩니다. `package-initialize`는 패키지 시스템을 초기화하고, `use-package`는 존재하지 않을 경우 자동으로 설치됩니다. `use-package-always-ensure t`는 `use-package` 블록에 지정된 모든 패키지가 자동으로 설치되도록 보장합니다.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))

(package-initialize)

(defvar my-package-install-retry-count 0)
(defadvice package-install (around my-package-install-advice (package-name) activate)
  "패키지 설치에 실패할 경우, 사용자 확인 후 콘텐츠를 새로고침하고 재시도합니다."
  (condition-case err
      ad-do-it
    (error
     (when (and (string-match "unavailable" (cadr err))
                (< my-package-install-retry-count 3))
       (setq my-package-install-retry-count (1+ my-package-install-retry-count))
       (if (y-or-n-p (format "패키지 %s 설치에 실패했습니다. 패키지 콘텐츠를 새로고침하고 다시 시도하시겠습니까? " package-name))
           (progn
             (message "패키지 콘텐츠를 새로고침하고 다시 시도 중...")
             (package-refresh-contents)
             (package-install package-name)) ; 동일한 패키지로 설치 재시도
         (message "사용자에 의해 패키지 설치가 중단되었습니다."))))))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* 환경 설정
** exec-path-from-shell
*** 역할
Emacs가 셸과 동일한 환경 변수, 특히 `PATH`를 공유하도록 보장합니다. 이는 macOS에서 Emacs 내에서 `brew`와 같은 명령줄 도구를 찾아 실행하는 데 중요합니다.

*** 설정 방법
이 패키지는 시작 시 셸 환경의 `PATH`를 Emacs로 복사합니다.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

* 기본 설정
*** 역할
기본적인 Emacs 동작을 구성합니다. 주로 가용성 향상을 위해 시각적 요소 및 파일 저장 방법에 대한 설정을 포함합니다.

*** 설정 방법
- `global-display-line-numbers-mode 1`: 모든 버퍼에 줄 번호를 표시합니다. 코드 작성이나 디버깅에 유용합니다.
- 주석 처리된 섹션은 자동 저장 및 테마 로딩과 관련이 있습니다. 필요에 따라 주석을 해제하여 사용할 수 있습니다.

#+begin_src emacs-lisp
;;(load-theme 'modus-vivendi t)
(global-display-line-numbers-mode 1)

;;(global-auto-revert-mode 1)
;;(setq auto-save-default t)
;;(setq auto-save-interval 300)

(setq scroll-conservatively 100000) ; 커서가 화면 중앙으로 자동 스크롤되는 것을 방지
#+end_src





* 테마
** Doom Themes
*** 역할
`doom-themes`는 Emacs를 위한 다양하고 아름다운 테마를 제공합니다. 시각적 편안함과 코드 가독성을 향상시킵니다.

*** 설정 방법
`use-package`를 사용하여 `doom-themes`를 설치하고 로드합니다. `:ensure t`는 패키지가 없을 경우 자동으로 설치되도록 합니다. `:config` 블록에서 `load-theme` 함수를 사용하여 원하는 테마를 로드합니다. 여기서는 `doom-one` 테마가 사용됩니다.

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))
#+end_src

* 탐색 및 자동 완성
** Ivy
*** 역할
`Ivy`는 Emacs의 미니버퍼를 위한 유연하고 빠른 자동 완성 프레임워크입니다. 파일, 버퍼, 명령어 등 다양한 항목을 효율적으로 검색하고 선택하는 데 도움이 됩니다.

*** 설정 방법
`use-package`를 사용하여 `Ivy`를 설치하고 활성화합니다. `:ensure t`는 패키지가 없을 경우 자동으로 설치되도록 합니다.

#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))
#+end_src

** Counsel
*** 역할
`Counsel`은 `Ivy` 프레임워크를 기반으로 다양한 명령어와 함수에 대한 인터페이스를 제공합니다. `M-x` (execute-extended-command)와 같은 핵심 Emacs 함수를 `Ivy`의 강력한 검색 및 필터링 기능과 통합하여 사용성을 향상시킵니다.

*** 설정 방법
`use-package`를 사용하여 `Counsel`을 설치하고, `:config` 블록에서 `M-x` 키를 `counsel-M-x`에 바인딩하여 Ivy 기반 명령어 실행을 활성화합니다.

#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x))
#+end_src

** Projectile
*** 역할
`Projectile`은 Emacs의 강력한 프로젝트 관리 도구입니다. 프로젝트 내 파일 검색, 버퍼 전환, 컴파일, 테스트 실행 등 프로젝트 관련 작업을 효율적으로 수행하는 데 도움이 됩니다.

*** 설정 방법
`use-package`를 사용하여 `Projectile`을 설치하고 활성화합니다. 대부분의 프로젝트에서 추가 설정 없이 잘 작동합니다.

#+begin_src emacs-lisp
(use-package projectile
  :ensure t)
#+end_src

** Company
*** 역할
`Company`는 Emacs의 텍스트 자동 완성 프레임워크입니다. 코드 작성 시 문맥에 맞는 자동 완성 후보를 제공하여 생산성을 높입니다.

*** 설정 방법
`use-package`를 사용하여 `Company`를 설치하고, `:init` 블록에서 `global-company-mode`를 활성화하여 모든 버퍼에서 자동 완성을 활성화합니다.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (global-company-mode))
#+end_src

* Evil 모드 설정
** Evil
*** 역할
`Evil`은 Emacs에서 Vim의 키 바인딩과 편집 스타일을 사용할 수 있게 해주는 강력한 에뮬레이션 레이어입니다. Vim 사용자가 익숙한 Vim 조작으로 Emacs의 풍부한 기능을 활용할 수 있게 해줍니다.

*** 설정 방법
`use-package`를 사용하여 `Evil`을 설치하고 활성화합니다.
- `:init` 블록에서 `evil-want-integration t`는 다른 Emacs 패키지와의 통합을 활성화하고, `evil-want-keybinding nil`은 `Evil`이 기본 Emacs 키 바인딩을 덮어쓰지 않도록 합니다.
- `:config` 블록에서 `(evil-mode 1)`은 `Evil` 모드를 전역적으로 활성화합니다.
- `(define-key evil-insert-state-map "jk" 'evil-normal-state)`는 `jk`를 눌러 삽입 모드에서 일반 모드로 전환하는 사용자 지정 키 바인딩입니다.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

** Evil Collection
*** 역할
`Evil Collection`은 `Evil` 모드를 다양한 내장 Emacs 기능 및 인기 패키지와 통합하여 일관된 Vim 키 바인딩 경험을 제공합니다. 예를 들어, Dired, Magit, Org 모드 등에서 Vim 키 바인딩을 사용할 수 있게 해줍니다.

*** 설정 방법
`use-package`를 사용하여 `Evil Collection`을 설치하고, `:after evil`을 사용하여 `Evil` 패키지 로드 후 활성화합니다. `:config` 블록에서 `(evil-collection-init)`를 호출하여 통합을 초기화합니다.

#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Evil Surround
*** 역할
`Evil Surround`는 Vim의 `surround.vim` 플러그인과 유사한 패키지로, 괄호, 따옴표, 태그 등을 쉽게 추가, 수정, 삭제할 수 있게 해줍니다. 코드 편집 시 매우 유용합니다.

*** 설정 방법
`use-package`를 사용하여 `Evil Surround`를 설치하고, `:after evil`을 사용하여 `Evil` 패키지 로드 후 활성화합니다. `:config` 블록에서 `(global-evil-surround-mode 1)`을 호출하여 `Evil Surround` 기능을 전역적으로 활성화합니다.

#+begin_src emacs-lisp
(use-package evil-surround
  :ensure t
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

* 편집
** smartparens
*** 역할
`smartparens`는 쌍으로 이루어진 편집을 도와주는 패키지입니다. 괄호, 대괄호, 따옴표 등의 쌍을 자동으로 완성해주고, 이를 지능적으로 조작하는 명령을 제공합니다. 코드나 구조화된 텍스트를 작성할 때 매우 유용합니다.

*** 설정 방법
`use-package`를 사용하여 `smartparens`를 설치합니다. `:config` 블록에서 `(smartparens-global-mode 1)`을 호출하여 전역적으로 기능을 활성화합니다.

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1))
#+end_src

* Editing
** smartparens
*** 역할
`smartparens`는 쌍 인식을 지원하는 편집 패키지입니다. 괄호, 대괄호, 따옴표 등의 닫는 쌍을 자동으로 삽입하고, 이를 지능적으로 조작하는 명령을 제공합니다. 이는 코드 및 구조화된 텍스트를 작성하는 데 매우 유용합니다.

*** 설정 방법
`use-package`를 사용하여 `smartparens`를 설치합니다. `:config` 블록에서 `(smartparens-global-mode 1)`은 기능을 전역적으로 활성화합니다.

#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1))
#+end_src

* Org 모드
** org-indent-mode 활성화
*** 역할
Org 모드 진입 시 `org-indent-mode`를 활성화하여 Org 모드 헤딩을 들여쓰기하여 계층 구조를 시각적으로 표현해줍니다. 이를 통해 문서의 개요를 더 쉽게 읽고 이해할 수 있습니다.

*** 설정 방법
`org-mode-hook`에 `org-indent-mode`를 추가하여 Org 모드 버퍼가 열릴 때마다 자동으로 활성화되도록 합니다.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

* vterm
** 역할
`vterm`은 Emacs 내에서 완전한 기능을 갖춘 터미널 에뮬레이터를 제공하는 패키지입니다. Emacs를 떠나지 않고도 셸 명령을 실행하고, 명령줄 도구를 사용하고, 터미널 세션을 관리할 수 있습니다.

** 설정 방법
`use-package`를 사용하여 `vterm`을 설치합니다. 이 설정은 `vterm`의 동적 모듈을 컴파일하는 데 필요한 `cmake`가 시스템에 설치되어 있는지 확인합니다.
- *macOS*에서는 `cmake`가 없으면 Homebrew를 사용하여 자동으로 설치합니다.
- *Linux*에서는 `cmake`가 없으면 패키지 관리자(예: `sudo apt-get install cmake`)를 사용하여 설치하라는 메시지를 표시합니다.
`cmake` 설치 후 `vterm`이 올바르게 컴파일되려면 Emacs를 다시 시작해야 할 수 있습니다.

#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :init
  (setq vterm-always-compile-module t)
  :config
  (when (not (executable-find "cmake"))
    (cond ((eq system-type 'darwin)
           (message "vterm: cmake not found. Attempting to install via Homebrew...")
           (shell-command "brew install cmake")
           (message "CMake has been installed. Please restart Emacs to allow vterm to compile."))
          ((eq system-type 'gnu/linux)
           (message "vterm: cmake not found. Please install it via 'sudo apt-get install cmake' and restart Emacs."))
          (t
           (message "vterm: cmake not found. Please install it using your system's package manager and restart Emacs.")))))
#+end_src

* Git 통합
** transient
*** 역할
`transient`는 Magit을 포함한 많은 Emacs 패키지에서 임시 키맵과 인수를 사용하여 복잡하고 대화형인 명령을 만드는 데 사용되는 라이브러리입니다. 다단계 작업에 일관된 인터페이스를 제공합니다.

*** 설정 방법
Magit과 같이 `transient`에 의존하는 패키지보다 먼저 `transient`가 설치되고 로드되도록 합니다.

#+begin_src emacs-lisp
(use-package transient
  :ensure t)
#+end_src

** Magit
*** 역할
`Magit`은 Emacs를 위한 포괄적인 Git 인터페이스입니다. Emacs 내에서 직접 Git 저장소와 상호 작용할 수 있는 편리하고 강력한 방법을 제공하며, 스테이징 및 커밋에서 브랜칭 및 리베이스에 이르기까지 모든 Git 작업을 직관적인 Emacs 인터페이스를 통해 제공합니다.

*** 설정 방법
`use-package`를 사용하여 `Magit`을 설치합니다. `:ensure t` 키워드는 `Magit`이 아직 없는 경우 자동으로 설치되도록 합니다. `:bind` 옵션은 `C-x g` 키 바인딩을 설정하여 대부분의 `Magit` 작업의 기본 진입점인 `Magit` 상태 버퍼를 빠르게 엽니다.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :after transient
  :init
  (require 'transient)
  :bind ("C-x g" . magit-status))
#+end_src

* 일반 키 바인딩
** which-key
*** 역할
`which-key`는 리더 키(`SPC` 등)를 누른 후 사용 가능한 키 바인딩을 팝업 창에 표시하는 필수 패키지입니다. 이를 통해 키 바인딩을 훨씬 쉽게 발견하고 사용할 수 있습니다.

*** 설정 방법
`use-package`를 사용하여 `which-key`를 설치하고 활성화합니다. `:config` 블록에서 `(which-key-mode)`를 호출하여 전역적으로 활성화합니다.

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** General
*** 역할
`General`은 Emacs에서 사용자 지정 키 바인딩을 설정하는 데 사용되는 강력한 패키지입니다. '리더 키'를 사용하여 Vim과 유사한 키 바인딩 시스템을 구축할 때 복잡한 키 시퀀스를 쉽게 정의하고 관리하는 데 도움이 됩니다.

*** 설정 방법
`use-package`를 사용하여 `General`을 설치합니다.

`:config` 블록에서 `general-create-definer`를 사용하여 `leader-def`라는 새 키 바인딩 정의자를 만듭니다.
- `:prefix "SPC"`: 스페이스바를 리더 키로 설정합니다. 즉, 모든 사용자 지정 키 바인딩은 스페이스바를 누른 후 시작됩니다.
- `:non-normal-prefix "M-SPC"`: 비-일반 상태(예: 삽입 모드)에 대해 `M-SPC`(Alt + 스페이스)를 리더 키로 설정합니다.
- `:states '(normal insert emacs)`: `normal`, `insert`, `emacs` 모드에 대해 이 키 바인딩 정의자를 활성화합니다.

`leader-def`를 사용하여 실제 키 바인딩을 정의합니다.
- `(leader-def ":" 'counsel-M-x)`: `SPC :`를 누르면 `counsel-M-x`(Ivy 기반 명령어 실행)가 실행됩니다.
- `(leader-def "b N" 'switch-to-buffer)`: `SPC b N`을 누르면 버퍼 전환 명령이 실행됩니다.

`which-key-idle-delay` 및 `which-key-show-remaining-keys`는 `which-key` 패키지(종종 `General`과 함께 사용됨)의 동작을 구성합니다. `which-key`는 리더 키를 누른 후 사용 가능한 다음 키 바인딩의 팝업을 표시하는 유용한 패키지입니다.

#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-create-definer leader-def
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    :states '(normal insert emacs))

  (leader-def
    ":" 'counsel-M-x
    "<" 'ivy-switch-buffer ; spc < 로 버퍼 리스트를 엽니다.
    "b" '(:ignore t :which-key "Buffers")
    "b N" 'switch-to-buffer
    "b k" 'kill-buffer
    "t" '(:ignore t :which-key "Terminal")
    "t t" 'vterm
    "f" '(:ignore t :which-key "Files")
    "f p" '("Find config.org" . (lambda () (interactive) (find-file (expand-file-name "~/dotfiles/config.org"))))))
(setq which-key-idle-delay 0.5)
(setq which-key-show-remaining-keys t)
#+end_src

* 키 바인딩
** 역할
이 섹션은 특히 Evil 모드 사용자를 위해 편집 환경을 개선하기 위한 사용자 지정 키 바인딩을 정의합니다. 목표는 특정 키를 Vim과 유사한 동작에 맞게 재매핑하면서 필수적인 Emacs 명령어에 대한 접근성을 유지하는 것입니다.

** 설정 방법
다음 구성이 적용됩니다.
- `C-u`는 직관적인 스크롤을 위해 Evil의 일반 및 비주얼 상태에서 `evil-scroll-up`으로 재매핑됩니다.
- 원래의 `universal-argument` 명령어는 쉽게 접근할 수 있도록 `SPC u`로 이동됩니다.

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

(leader-def
  "u" 'universal-argument)
#+end_src

* 사용자 지정 설정
** 역할
이 섹션에는 Emacs의 `customize` 인터페이스에서 생성된 사용자 지정 설정이 포함되어 있습니다. 이러한 설정은 일반적으로 `M-x customize` 또는 관련 함수를 사용할 때 Emacs에 의해 자동으로 저장됩니다. 수동 오류를 방지하기 위해 `customize` 인터페이스를 통해 이러한 설정을 관리하는 것이 일반적으로 권장됩니다.

** 설정 방법
`custom-set-variables` 블록은 사용자 지정 변수 값을 정의하고, `custom-set-faces`는 사용자 지정 페이스(글꼴 및 색상) 설정을 정의합니다. 이들은 Emacs에 의해 자동으로 생성되고 관리됩니다.

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables는 Custom에 의해 추가되었습니다.
 ;; 직접 편집하면 문제가 발생할 수 있으므로 주의하십시오.
 ;; init 파일에는 이러한 인스턴스가 하나만 포함되어야 합니다.
 ;; 두 개 이상 있으면 제대로 작동하지 않습니다.
 '(package-selected-packages
   '(vterm which-key projectile general evil-surround evil-collection doom-themes counsel company cider)))
(custom-set-faces
 ;; custom-set-faces는 Custom에 의해 추가되었습니다.
 ;; 직접 편집하면 문제가 발생할 수 있으므로 주의하십시오.
 ;; init 파일에는 이러한 인스턴스가 하나만 포함되어야 합니다.
 ;; 두 개 이상 있으면 제대로 작동하지 않습니다.
 )
#+end_src